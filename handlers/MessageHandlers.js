const { askGigaChat } = require("../services/gigaChat");
const { userService, getSystemPrompt } = require("../services/userProfile");
const { YOUR_USER_ID } = require("../config/keys");
const speechService = require("../services/speechService");
const fetch = require("node-fetch");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
function handleSpecificQuestions(text) {
  const lowerText = text.toLowerCase();

  if (
    lowerText.includes("–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç") ||
    lowerText.includes("–º–æ–µ –∏–º—è") ||
    lowerText.includes("–º–µ–Ω—è –∑–æ–≤—É—Ç") ||
    lowerText.includes("–∫—Ç–æ —è")
  ) {
    return "–¢–µ–±—è –∑–æ–≤—É—Ç –ê—Ä—Ç–µ–º!";
  }

  if (
    lowerText.includes("—Å–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç") ||
    lowerText.includes("–º–æ–π –≤–æ–∑—Ä–∞—Å—Ç") ||
    lowerText.includes("–º–Ω–µ –ª–µ—Ç")
  ) {
    return "–¢–µ–±–µ 17 –ª–µ—Ç!";
  }

  if (
    lowerText.includes("—á–µ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å") ||
    lowerText.includes("–º–æ—è —Ä–∞–±–æ—Ç–∞") ||
    lowerText.includes("–º–æ–π –±–∏–∑–Ω–µ—Å") ||
    lowerText.includes("—á—Ç–æ —è –¥–µ–ª–∞—é")
  ) {
    return "–¢—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –±–∏–∑–Ω–µ—Å–æ–º (–ø—Ä–æ–¥–∞–∂–∞ —Ä–µ–∫–ª–∞–º—ã), IT –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–π –±–∏–∑–Ω–µ—Å!";
  }

  return null;
}

// –£–î–ê–õ–Ø–ï–ú –≠–¢–£ –§–£–ù–ö–¶–ò–Æ, –¢–ê–ö –ö–ê–ö –û–ù–ê –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø
/*
async function handleMessage(ctx) {
  // {
  if (ctx.from.id !== YOUR_USER_ID) {
    return ctx.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π");
  }

  const userMessage = ctx.message.text;
  const userId = ctx.from.id;

  console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userMessage);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
  const specificAnswer = handleSpecificQuestions(userMessage);
  if (specificAnswer) {
    await ctx.reply(specificAnswer);
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
  await ctx.api.sendChatAction(ctx.chat.id, "typing");

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ –ë–î –≤–∫–ª—é—á–µ–Ω–∞)
  // await userService.addToHistory(userId, userMessage, "user");

  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –ë–î –≤–∫–ª—é—á–µ–Ω–∞)
  // const messages = await userService.getChatHistory(userId);

  // –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò–°–¢–û–†–ò–ò –ó–î–ï–°–¨
  // console.log("üìã –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:", JSON.stringify(messages, null, 2));

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
  // const userProfile = await userService.getProfile(userId);
  const userProfile = null; // –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–∞
  const systemPrompt = getSystemPrompt(userProfile);

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GigaChat
  const messages = [systemPrompt, { role: "user", content: userMessage }];

  console.log(
    "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ GigaChat:",
    JSON.stringify(messages, null, 2)
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
  const aiResponse = await askGigaChat(messages);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ –ë–î –≤–∫–ª—é—á–µ–Ω–∞)
  // await userService.addToHistory(userId, aiResponse, "assistant");

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await ctx.reply(aiResponse);
}
*/ 

async function handleClearCommand(ctx) {
  if (ctx.from.id !== YOUR_USER_ID) return;

  // await userService.clearHistory(ctx.from.id); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  await ctx.reply("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!");
}

async function handleInfoCommand(ctx) {
  if (ctx.from.id !== YOUR_USER_ID) return;

  // const history = await userService.getChatHistory(ctx.from.id); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  const history = [];
  const messageCount = history.length;

  await ctx.reply(
    `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–µ:\n` +
      `–°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${messageCount}\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é`
  );
}

async function handleVoiceMessage(ctx) {
  console.log("üîä START: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");

  if (!ctx.message.voice) {
    console.log("üõë –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ voice, –Ω–æ –±–µ–∑ voice –¥–∞–Ω–Ω—ã—Ö");
    return;
  }

  if (ctx.from.id !== YOUR_USER_ID) {
    console.log(
      "üîí –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
      ctx.from.id
    );
    return ctx.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π");
  }

  try {
    console.log("üîä –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ 'typing'");
    await ctx.replyWithChatAction("typing");

    console.log("üîä –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ");
    const fileId = ctx.message.voice.file_id;
    const file = await ctx.api.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;

    console.log("üîä –®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª:", fileUrl);
    const response = await fetch(fileUrl);
    const audioBuffer = await response.buffer();
    console.log("‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä:", audioBuffer.length);

    console.log("üîä –®–∞–≥ 4: –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å...");
    const text = await speechService.speechToText(audioBuffer);

    if (!text) {
      console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å");
      return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å");
    }

    console.log("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", text);
    await ctx.reply(`üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${text}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    const specificAnswer = handleSpecificQuestions(text);
    if (specificAnswer) {
      console.log("üîç –ù–∞–π–¥–µ–Ω —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—á–∞–µ–º...");
      await ctx.reply(specificAnswer);
      return;
    }

    console.log("üîä –®–∞–≥ 5: –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat");
    const messages = [getSystemPrompt(), { role: "user", content: text }];

    console.log(
      "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ GigaChat:",
      JSON.stringify(messages, null, 2)
    );

    console.log("üîä –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat");
    await ctx.api.sendChatAction(ctx.chat.id, "typing");
    const aiResponse = await askGigaChat(messages);

    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GigaChat");
    await ctx.reply(aiResponse);

    console.log("üîä END: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    console.error(
      "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
      error
    );
    console.error("üí• Stack trace:", error.stack);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
  }
}

module.exports = {
  
  handleClearCommand,
  handleInfoCommand,
  handleVoiceMessage,
  handleSpecificQuestions, // –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
};
