const https = require("https");
const fetch = require("node-fetch");
const { AUTH_KEY } = require("../config/keys");

const customAgent = new https.Agent({ rejectUnauthorized: false });

// –ö—ç—à –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
let accessTokenCache = {
  token: null,
  expiresAt: 0,
};

async function getGigaChatToken() {
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (accessTokenCache.token && Date.now() < accessTokenCache.expiresAt) {
    console.log("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω");
    return accessTokenCache.token;
  }

  try {
    const response = await fetch(
      "https://ngw.devices.sberbank.ru:9443/api/v2/oauth",
      {
        method: "POST",
        headers: {
          Authorization: `Basic ${AUTH_KEY}`,
          "Content-Type": "application/x-www-form-urlencoded",
          Accept: "application/json",
          RqUID: generateUUID(),
        },
        body: "scope=GIGACHAT_API_PERS",
        agent: customAgent,
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—ç—à (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω—É—Ç)
    accessTokenCache = {
      token: data.access_token,
      expiresAt: Date.now() + 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç
    };

    console.log("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω");
    return data.access_token;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error.message);
    return null;
  }
}

async function askGigaChat(messages, maxTokens = 512) {
  try {
    const accessToken = await getGigaChatToken();
    if (!accessToken) return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI";

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log(
      "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ GigaChat:",
      JSON.stringify(messages, null, 2)
    );

    const response = await fetch(
      "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify({
          model: "GigaChat",
          messages: messages,
          temperature: 0.7,
          max_tokens: maxTokens,
        }),
        agent: customAgent,
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error(
        `‚ùå GigaChat error! status: ${response.status}, response: ${errorText}`
      );
      throw new Error(`GigaChat error! status: ${response.status}`);
    }

    const data = await response.json();

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç GigaChat:", JSON.stringify(data, null, 2));

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat:", data);
      return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞";
    }

    return data.choices[0].message.content;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat:", error.message);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞";
  }
}

function generateUUID() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

module.exports = { getGigaChatToken, askGigaChat };
